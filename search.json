[{"path":"http://rstudio.github.io/pool/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joe Cheng. Author, maintainer. Barbara Borges. Author. RStudio. Copyright holder.","code":""},{"path":"http://rstudio.github.io/pool/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheng J, Borges B (2023). pool: Object Pooling. https://github.com/rstudio/pool, http://rstudio.github.io/pool/.","code":"@Manual{,   title = {pool: Object Pooling},   author = {Joe Cheng and Barbara Borges},   year = {2023},   note = {https://github.com/rstudio/pool, http://rstudio.github.io/pool/}, }"},{"path":[]},{"path":"http://rstudio.github.io/pool/index.html","id":"database-connection-pooling-in-r","dir":"","previous_headings":"","what":"Database Connection Pooling in R","title":"Object Pooling","text":"goal pool package abstract away logic connection management performance cost fetching new connection remote database. concerns especially prominent interactive contexts, like Shiny apps (connect remote database) even R console. , package practical value Shiny developers, harm used contexts. Since pool integrates DBI dplyr, things new , ’re already using either packages. Essentially, shouldn’t feel difference, exception creating closing Pool object (opposed connecting disconnecting DBIConnection object).","code":""},{"path":"http://rstudio.github.io/pool/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Object Pooling","text":"’s simple example using pool within Shiny app (feel free try ): Note: loadNamespace(\"dbplyr\") line help rsconnect package deploying application shinyapps.io Posit Connect. Without line, rsconnect detect dbplyr package needed, application work properly.","code":"library(shiny) library(dplyr) library(pool) loadNamespace(\"dbplyr\")  pool <- dbPool(   drv = RMySQL::MySQL(),   dbname = \"shinydemo\",   host = \"shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com\",   username = \"guest\",   password = \"guest\" ) onStop(function() {   poolClose(pool) })  ui <- fluidPage(   textInput(\"ID\", \"Enter your ID:\", \"5\"),   tableOutput(\"tbl\"),   numericInput(\"nrows\", \"How many cities to show?\", 10),   plotOutput(\"popPlot\") )  server <- function(input, output, session) {   output$tbl <- renderTable({     pool %>% tbl(\"City\") %>% filter(ID == !!input$ID) %>% collect()   })   output$popPlot <- renderPlot({     df <- pool %>% tbl(\"City\") %>% head(input$nrows) %>% collect()     pop <- df$Population     names(pop) <- df$Name     barplot(pop)   }) }  shinyApp(ui, server)"},{"path":"http://rstudio.github.io/pool/index.html","id":"concept","dir":"","previous_headings":"","what":"Concept","title":"Object Pooling","text":"pool package adds new level abstraction connecting database: instead directly fetching connection database, create object (called pool) reference database. pool holds number connections database. may currently -use may idle, waiting query request . time make query, querying pool, rather database. hood, pool either give idle connection previously fetched database , free connections, fetch one give . never create close connections directly: pool knows grow, shrink keep steady. need close pool ’re done.","code":""},{"path":"http://rstudio.github.io/pool/index.html","id":"context-and-motivation","dir":"","previous_headings":"","what":"Context and motivation","title":"Object Pooling","text":"’re connecting database, important manage connections: open (taking account potentially long process remote databases), keep track , close . always true, becomes especially relevant Shiny apps, following best practices can lead many slowdowns (inadvertently opening many connections) /many leaked connections (.e. forgetting close connections longer need ). time, leaked connections accumulate substantially slow app, well overwhelming database . Oversimplifying bit, can think connection management Shiny spectrum extreme just one connection per app (potentially serving several sessions app) extreme opening (closing) one connection query make. Neither approaches great. can expand either arrows see source code extreme, essential understanding problems described .  Opening one connection per app makes fast (, whole app, fetch one connection) code kept simple possible. However: handle simultaneous requests (e.g. two sessions open, querying database time); connection breaks point (maybe database server crashed), won’t get new connection (exit app re-run ); finally, quite extreme, use one connection per app (fewer one connection per query), can difficult keep track connections, since ’ll opening closing potentially different places. extreme opening (closing) one connection query make resolves points, terribly slow (time need access database, first fetch connection), need lot (boilerplate) code connect disconnect connection within reactive/function. pool package created don’t worry . Since pool abstracts away logic connection management, vast majority cases, never deal connections directly. Since pool “knows” connections manage , advantages second approach (one connection per query), without disadvantages. still using one connection per query, connection always fetched returned pool, rather getting database directly. whole lot faster efficient. Finally, code kept just simple code first approach (one connection entire app). fact, look back pool Shiny app example , notice code structure essentially ’d use open connection start app close end.","code":"library(shiny) library(dplyr) library(DBI) loadNamespace(\"dbplyr\")  conn <- dbConnect(     drv = RMySQL::MySQL(),     dbname = \"shinydemo\",     host = \"shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com\",     username = \"guest\",     password = \"guest\"   ) onStop(function() {   dbDisconnect(conn) })  ui <- fluidPage(   textInput(\"ID\", \"Enter your ID:\", \"5\"),   tableOutput(\"tbl\"),   numericInput(\"nrows\", \"How many cities to show?\", 10),   plotOutput(\"popPlot\") )  server <- function(input, output, session) {   output$tbl <- renderTable({     conn %>% tbl(\"City\") %>% filter(ID == !!input$ID) %>% collect()   })   output$popPlot <- renderPlot({     df <- conn %>% tbl(\"City\") %>% head(input$nrows) %>% collect()     pop <- df$Population     names(pop) <- df$Name     barplot(pop)   }) }  shinyApp(ui, server) library(shiny) library(dplyr) library(DBI) loadNamespace(\"dbplyr\")  args <- list(   drv = RMySQL::MySQL(),   dbname = \"shinydemo\",   host = \"shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com\",   username = \"guest\",   password = \"guest\" )  ui <- fluidPage(   textInput(\"ID\", \"Enter your ID:\", \"5\"),   tableOutput(\"tbl\"),   numericInput(\"nrows\", \"How many cities to show?\", 10),   plotOutput(\"popPlot\") )  server <- function(input, output, session) {   output$tbl <- renderTable({     conn <- do.call(dbConnect, args)     on.exit(dbDisconnect(conn))      conn %>% tbl(\"City\") %>% filter(ID == !!input$ID) %>% collect()   })   output$popPlot <- renderPlot({     conn <- do.call(dbConnect, args)     on.exit(dbDisconnect(conn))      df <- conn %>% tbl(\"City\") %>% head(input$nrows) %>% collect()     pop <- df$Population     names(pop) <- df$Name     barplot(pop)   }) }  shinyApp(ui, server)"},{"path":"http://rstudio.github.io/pool/index.html","id":"more-resources","dir":"","previous_headings":"","what":"More resources","title":"Object Pooling","text":"db.rstudio.com lot best practices, articles demos databases R RStudio. shiny.rstudio.com learn Shiny (also articles, including data databases /articles).","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-connection-interpolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely interpolate values into an SQL string and parse them back. — DBI-connection-interpolate","title":"Safely interpolate values into an SQL string and parse them back. — DBI-connection-interpolate","text":"Pool object wrappers around DBIConnection methods deal safe interpolation values SQL string reverse -- parsing interpolated variables SQL. See DBI::sqlInterpolate() DBI::sqlParseVariables() original documentation.","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-connection-interpolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely interpolate values into an SQL string and parse them back. — DBI-connection-interpolate","text":"","code":"# S4 method for Pool sqlInterpolate(conn, sql, ..., .dots = list())  # S4 method for Pool sqlParseVariables(conn, sql, ...)"},{"path":"http://rstudio.github.io/pool/reference/DBI-connection-interpolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely interpolate values into an SQL string and parse them back. — DBI-connection-interpolate","text":"conn, sql, ..., .dots See DBI::sqlInterpolate().","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-connection-quote.html","id":null,"dir":"Reference","previous_headings":"","what":"SQL quoting. — DBI-connection-quote","title":"SQL quoting. — DBI-connection-quote","text":"Pool object wrappers around DBIConnection methods deal SQL escaping needs. See DBI::SQL() original documentation.","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-connection-quote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SQL quoting. — DBI-connection-quote","text":"","code":"# S4 method for Pool,ANY dbQuoteIdentifier(conn, x, ...)  # S4 method for Pool dbUnquoteIdentifier(conn, x, ...)  # S4 method for Pool dbQuoteLiteral(conn, x, ...)  # S4 method for Pool,ANY dbQuoteString(conn, x, ...)"},{"path":"http://rstudio.github.io/pool/reference/DBI-connection-quote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SQL quoting. — DBI-connection-quote","text":"conn, x, ... See DBI::SQL().","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-connection-sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating and manipulating SQL tables. — DBI-connection-sql","title":"Creating and manipulating SQL tables. — DBI-connection-sql","text":"Pool object wrappers around DBIConnection methods deal creation manipulation SQL tables. See DBI::sqlData(), DBI::sqlCreateTable() DBI::sqlAppendTable() original documentation.","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-connection-sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating and manipulating SQL tables. — DBI-connection-sql","text":"","code":"# S4 method for Pool sqlData(con, value, row.names = NA, ...)  # S4 method for Pool sqlCreateTable(con, table, fields, row.names = NA, temporary = FALSE, ...)  # S4 method for Pool sqlAppendTable(con, table, values, row.names = NA, ...)"},{"path":"http://rstudio.github.io/pool/reference/DBI-connection-sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating and manipulating SQL tables. — DBI-connection-sql","text":"con, value, row.names, ... See DBI::sqlData(). table, fields, temporary See DBI::sqlCreateTable(). values See DBI::sqlAppendTable().","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-connection-transaction.html","id":null,"dir":"Reference","previous_headings":"","what":"DBIConnection transaction methods are not supported for\nPool objects. — DBI-connection-transaction","title":"DBIConnection transaction methods are not supported for\nPool objects. — DBI-connection-transaction","text":"perform SQL transaction using Pool object directly (imply keeping connection open knowing return back pool).","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-connection-transaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBIConnection transaction methods are not supported for\nPool objects. — DBI-connection-transaction","text":"","code":"# S4 method for Pool dbBegin(conn, ...)  # S4 method for Pool dbCommit(conn, ...)  # S4 method for Pool dbRollback(conn, ...)  # S4 method for Pool dbWithTransaction(conn, code)"},{"path":"http://rstudio.github.io/pool/reference/DBI-connection-transaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBIConnection transaction methods are not supported for\nPool objects. — DBI-connection-transaction","text":"conn, ..., code See DBI::transactions().","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-connection-transaction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DBIConnection transaction methods are not supported for\nPool objects. — DBI-connection-transaction","text":"must use methods, fetch actual connection first conn <- poolCheckout(pool) -- call appropriate DBI method conn. Since fetching connection pool , must also remember return back pool done: poolReturn(conn) (otherwise, leaked connection). simple transactions, consider using poolWithTransaction() instead, safer since require fetch release connection . See DBI::transactions() original documentation.","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-connection.html","id":null,"dir":"Reference","previous_headings":"","what":"DBIConnection methods. — DBI-connection","title":"DBIConnection methods. — DBI-connection","text":"convenience, Pool implements DBIConnection methods; calling implemented DBI method directly Pool object result connection checked (poolCheckout()), operation performed connection, connection returned pool (poolReturn()).","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBIConnection methods. — DBI-connection","text":"","code":"# S4 method for Pool dbSendQuery(conn, statement, ...)  # S4 method for Pool,ANY dbSendStatement(conn, statement, ...)  # S4 method for Pool,character dbGetQuery(conn, statement, ...)  # S4 method for Pool,character dbExecute(conn, statement, ...)  # S4 method for Pool dbListResults(conn, ...)  # S4 method for Pool,character dbListFields(conn, name, ...)  # S4 method for Pool dbListTables(conn, ...)  # S4 method for Pool dbListObjects(conn, prefix = NULL, ...)  # S4 method for Pool,character dbReadTable(conn, name, ...)  # S4 method for Pool,ANY dbWriteTable(conn, name, value, ...)  # S4 method for Pool dbCreateTable(conn, name, fields, ..., row.names = NULL, temporary = FALSE)  # S4 method for Pool dbAppendTable(conn, name, value, ..., row.names = NULL)  # S4 method for Pool,ANY dbExistsTable(conn, name, ...)  # S4 method for Pool,ANY dbRemoveTable(conn, name, ...)  # S4 method for Pool dbIsReadOnly(dbObj, ...)"},{"path":"http://rstudio.github.io/pool/reference/DBI-connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBIConnection methods. — DBI-connection","text":"conn, dbObj Pool object, returned dbPool(). statement, name, value, prefix, fields, row.names, temporary, ... See DBI documentation.","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-connection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DBIConnection methods. — DBI-connection","text":"Pool implement DBI::dbSendQuery() DBI::dbSendStatement() methods return live ResultSet objects. incompatible Pool model, connection returned pool, using existing ResultSet object give erroneous results, throw error, even crash entire R process. cases, DBI::dbGetQuery() DBI::dbExecute() can used instead. really need control dbSendQuery gives (example, process large table chunks) use poolCheckout() get real connection object (forget return pool using poolReturn() afterwards).","code":""},{"path":[]},{"path":"http://rstudio.github.io/pool/reference/DBI-connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DBIConnection methods. — DBI-connection","text":"","code":"if (requireNamespace(\"RSQLite\", quietly = TRUE)) {   mtcars1 <- mtcars[ c(1:16), ] # first half of the mtcars dataset   mtcars2 <- mtcars[-c(1:16), ] # second half of the mtcars dataset    pool <- dbPool(RSQLite::SQLite(), dbname = \":memory:\")    # write the mtcars1 table into the database   dbWriteTable(pool, \"mtcars\", mtcars1, row.names = TRUE)    # list the current tables in the database   dbListTables(pool)    # read the \"mtcars\" table from the database (only 16 rows)   dbReadTable(pool, \"mtcars\")    # append mtcars2 to the \"mtcars\" table already in the database   dbWriteTable(pool, \"mtcars\", mtcars2, row.names = TRUE, append = TRUE)    # read the \"mtcars\" table from the database (all 32 rows)   dbReadTable(pool, \"mtcars\")    # get the names of the columns in the databases's table   dbListFields(pool, \"mtcars\")    # use dbExecute to change the \"mpg\" and \"cyl\" values of the 1st row   dbExecute(pool,     paste(       \"UPDATE mtcars\",       \"SET mpg = '22.0', cyl = '10'\",       \"WHERE row_names = 'Mazda RX4'\"     )   )    # read the 1st row of \"mtcars\" table to confirm the previous change   dbGetQuery(pool, \"SELECT * FROM mtcars WHERE row_names = 'Mazda RX4'\")    # drop the \"mtcars\" table from the database   dbRemoveTable(pool, \"mtcars\")    # list the current tables in the database   dbListTables(pool)    poolClose(pool)  } else {   message(\"Please install the 'RSQLite' package to run this example\") }"},{"path":"http://rstudio.github.io/pool/reference/DBI-object-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Make R identifiers into legal SQL identifiers. — DBI-object-deprecated","title":"Make R identifiers into legal SQL identifiers. — DBI-object-deprecated","text":"Pool object wrappers around DBIObject methods. See DBI::make.db.names() original documentation. Note methods DEPRECATED. Please use dbQuoteIdentifier (possibly dbQuoteString) instead, documented DBI-connection-quote().","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-object-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make R identifiers into legal SQL identifiers. — DBI-object-deprecated","text":"","code":"# S4 method for Pool,character make.db.names(   dbObj,   snames,   keywords = .SQL92Keywords,   unique = TRUE,   allow.keywords = TRUE,   ... )  # S4 method for Pool,character isSQLKeyword(   dbObj,   name,   keywords = .SQL92Keywords,   case = c(\"lower\", \"upper\", \"any\")[3],   ... )  # S4 method for Pool SQLKeywords(dbObj, ...)"},{"path":"http://rstudio.github.io/pool/reference/DBI-object-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make R identifiers into legal SQL identifiers. — DBI-object-deprecated","text":"dbObj, snames, keywords, unique, allow.keywords, name, case, ... see DBI::make.db.names()","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-object.html","id":null,"dir":"Reference","previous_headings":"","what":"DBIObject methods. — DBI-object","title":"DBIObject methods. — DBI-object","text":"Pool object wrappers around DBIObject methods. See DBI::dbDataType(), DBI::dbGetInfo() DBI::dbIsValid() original documentation.","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBIObject methods. — DBI-object","text":"","code":"# S4 method for Pool dbDataType(dbObj, obj, ...)  # S4 method for Pool dbGetInfo(dbObj, ...)  # S4 method for Pool dbIsValid(dbObj, obj, ...)"},{"path":"http://rstudio.github.io/pool/reference/DBI-object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBIObject methods. — DBI-object","text":"dbObj, obj, ... See DBI::dbDataType().","code":""},{"path":"http://rstudio.github.io/pool/reference/DBI-object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DBIObject methods. — DBI-object","text":"","code":"if (requireNamespace(\"RSQLite\", quietly = TRUE)) {   pool <- dbPool(RSQLite::SQLite(), dbname = \":memory:\")    dbGetInfo(pool)   dbIsValid(pool)    dbDataType(pool, 1:5)   dbDataType(pool, 1)   dbDataType(pool, TRUE)   dbDataType(pool, Sys.Date())   dbDataType(pool, Sys.time())   dbDataType(pool, Sys.time() - as.POSIXct(Sys.Date()))   dbDataType(pool, c(\"x\", \"abc\"))   dbDataType(pool, list(raw(10), raw(20)))   dbDataType(pool, I(3))   dbDataType(pool, iris)    poolClose(pool)    dbIsValid(pool)  } else {   message(\"Please install the 'RSQLite' package to run this example\") } #> [1] FALSE"},{"path":"http://rstudio.github.io/pool/reference/Pool-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a pool of reusable objects — Pool-class","title":"Create a pool of reusable objects — Pool-class","text":"generic pool class holds objects. can fetched pool released back , little computational cost. pool created closed longer needed, prevent leaks. See dbPool() example object pooling applied DBI database connections.","code":""},{"path":"http://rstudio.github.io/pool/reference/Pool-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a pool of reusable objects — Pool-class","text":"","code":"poolCreate(   factory,   minSize = 1,   maxSize = Inf,   idleTimeout = 60,   validationInterval = 600,   state = NULL )  poolClose(pool)  # S4 method for Pool poolClose(pool)"},{"path":"http://rstudio.github.io/pool/reference/Pool-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a pool of reusable objects — Pool-class","text":"factory factory function used create responsible generation objects pool hold (ex: DBI database connections, function dbConnect). must take arguments. minSize, maxSize minimum maximum number objects pool. idleTimeout number seconds idle object kept pool destroyed (applies number objects minSize). Use Inf want created objects never destroyed (great reason usually). validationInterval minimum number seconds pool wait running validation check next checked object. necessarily validating every checked object, can substantial performance gains (especially interval checking new objects small). state pool public variable used backend authors necessary. pool Pool object previously created poolCreate","code":""},{"path":"http://rstudio.github.io/pool/reference/dbPool.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a pool of database connections — dbPool","title":"Create a pool of database connections — dbPool","text":"dbPool() drop-replacement DBI::dbConnect() provides shared pool connections can automatically reconnect database needed.","code":""},{"path":"http://rstudio.github.io/pool/reference/dbPool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a pool of database connections — dbPool","text":"","code":"dbPool(   drv,   ...,   minSize = 1,   maxSize = Inf,   idleTimeout = 60,   validationInterval = 600,   validateQuery = NULL )"},{"path":"http://rstudio.github.io/pool/reference/dbPool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a pool of database connections — dbPool","text":"drv DBI Driver, e.g. RSQLite::SQLite(), RPostgres::Postgres(), odbc::odbc() etc. ... Arguments passed DBI::dbConnect(). used identify database provide needed authentication. minSize, maxSize minimum maximum number objects pool. idleTimeout number seconds idle object kept pool destroyed (applies number objects minSize). Use Inf want created objects never destroyed (great reason usually). validationInterval minimum number seconds pool wait running validation check next checked object. necessarily validating every checked object, can substantial performance gains (especially interval checking new objects small). validateQuery simple query can used verify connetction valid. provided, dbPool() try common options, work databases.","code":""},{"path":"http://rstudio.github.io/pool/reference/dbPool.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a pool of database connections — dbPool","text":"","code":"# You use a dbPool in the same way as a standard DBI connection pool <- dbPool(RSQLite::SQLite()) DBI::dbWriteTable(pool, \"mtcars\", mtcars) dbGetQuery(pool, \"SELECT * FROM mtcars LIMIT 4\") #>    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1  # Using the RMySQL package if (requireNamespace(\"RMySQL\", quietly = TRUE)) {   pool <- dbPool(     drv = RMySQL::MySQL(),     dbname = \"shinydemo\",     host = \"shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com\",     username = \"guest\",     password = \"guest\"   )    dbGetQuery(pool, \"SELECT * from City LIMIT 5;\")    poolClose(pool) }"},{"path":"http://rstudio.github.io/pool/reference/dplyr-db-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"DBIConnection methods from dplyr and dbplyr — dplyr-db-methods","title":"DBIConnection methods from dplyr and dbplyr — dplyr-db-methods","text":"Pool object wrappers around DBIConnection methods, whose generics defined either dplyr dbplyr. original documentation, see dplyr's reference page dbplyr's reference page.","code":""},{"path":"http://rstudio.github.io/pool/reference/dplyr-db-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBIConnection methods from dplyr and dbplyr — dplyr-db-methods","text":"","code":"copy_to.Pool(   dest,   df,   name = deparse(substitute(df)),   overwrite = FALSE,   temporary = TRUE,   ... )  tbl.Pool(src, from, ..., vars = NULL, con = NULL)  db_analyze.Pool(con, table, ...)  db_begin.Pool(con, ...)  db_commit.Pool(con, ...)  db_create_index.Pool(con, table, columns, name = NULL, unique = FALSE, ...)  db_create_indexes.Pool(con, table, indexes = NULL, unique = FALSE, ...)  db_create_table.Pool(con, table, types, temporary = FALSE, ...)  db_data_type.Pool(con, fields)  db_desc.Pool(x)  db_drop_table.Pool(con, table, force = FALSE, ...)  db_explain.Pool(con, sql, ...)  db_has_table.Pool(con, table)  db_insert_into.Pool(con, table, values, ...)  db_list_tables.Pool(con)  db_query_fields.Pool(con, sql, ...)  db_query_rows.Pool(con, sql, ...)  db_rollback.Pool(con, ...)  db_save_query.Pool(con, sql, name, temporary = TRUE, ...)  db_write_table.Pool(con, table, types, values, temporary = FALSE, ...)  sql_escape_string.Pool(con, x)  sql_join.Pool(con, x, y, vars, type = \"inner\", by = NULL, ...)  sql_select.Pool(   con,   select,   from,   where = NULL,   group_by = NULL,   having = NULL,   order_by = NULL,   limit = NULL,   distinct = FALSE,   ... )  sql_semi_join.Pool(con, x, y, anti = FALSE, by = NULL, ...)  sql_subquery.Pool(con, from, name = random_table_name(), ...)  sql_translate_env.Pool(con)  db_collect.Pool(con, sql, n = -1, warn_incomplete = TRUE, ...)  db_compute.Pool(   con,   table,   sql,   temporary = TRUE,   unique_indexes = list(),   indexes = list(),   ... )  db_sql_render.Pool(con, sql, ...)  sql_escape_logical.Pool(con, x)  sql_join_suffix.Pool(con, ...)"},{"path":"http://rstudio.github.io/pool/reference/dplyr-db-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBIConnection methods from dplyr and dbplyr — dplyr-db-methods","text":"dest, df, name, overwrite, temporary, ..., src, , con, table, columns, unique, indexes, types, fields, x, force, sql, values, y, vars, type, , select, , group_by, , order_by, limit, distinct, anti, n, warn_incomplete, unique_indexes See original documentation.","code":""},{"path":"http://rstudio.github.io/pool/reference/dplyr-db-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DBIConnection methods from dplyr and dbplyr — dplyr-db-methods","text":"","code":"if (requireNamespace(\"RSQLite\", quietly = TRUE)) {   library(dplyr)    db <- tempfile()   pool <- dbPool(RSQLite::SQLite(), dbname = db)    # copy a table into the database   copy_to(pool, mtcars, \"mtcars\", temporary = FALSE)    # retrieve a table   mtcars_db <- tbl(pool, \"mtcars\")   mtcars_db   mtcars_db %>% select(mpg, cyl, disp)   mtcars_db %>% filter(cyl == 6) %>% collect()    poolClose(pool) } else {   message(\"Please install the 'RSQLite' package to run this example\") } #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #> Warning: <Pool> uses an old dbplyr interface #> ℹ Please install a newer version of the package or contact the maintainer #> This warning is displayed once every 8 hours."},{"path":"http://rstudio.github.io/pool/reference/object.html","id":null,"dir":"Reference","previous_headings":"","what":"Pooled object methods. — object","title":"Pooled object methods. — object","text":"backend authors . Authors implement , called Pool class methods. called directly either backend authors end users.","code":""},{"path":"http://rstudio.github.io/pool/reference/object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pooled object methods. — object","text":"","code":"onActivate(object)  onPassivate(object)  onDestroy(object)  onValidate(object, query)  # S4 method for ANY onActivate(object)  # S4 method for ANY onPassivate(object)  # S4 method for ANY onDestroy(object)  # S4 method for ANY onValidate(object, query)  # S4 method for DBIConnection onPassivate(object)  # S4 method for DBIConnection onDestroy(object)  # S4 method for DBIConnection onValidate(object)"},{"path":"http://rstudio.github.io/pool/reference/object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pooled object methods. — object","text":"object pooled object. query simple query can used verify object functions expected.","code":""},{"path":"http://rstudio.github.io/pool/reference/pool-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pool: Object Pooling — pool-package","title":"pool: Object Pooling — pool-package","text":"Enables creation object pools, make less computationally expensive fetch new object. Currently supported pooled objects 'DBI' connections.","code":""},{"path":[]},{"path":"http://rstudio.github.io/pool/reference/pool-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pool: Object Pooling — pool-package","text":"Maintainer: Joe Cheng joe@rstudio.com Authors: Barbara Borges barb.b.ribeiro@gmail.com contributors: RStudio [copyright holder]","code":""},{"path":"http://rstudio.github.io/pool/reference/poolCheckout.html","id":null,"dir":"Reference","previous_headings":"","what":"Check out and return object from the pool — poolCheckout","title":"Check out and return object from the pool — poolCheckout","text":"Use poolCheckout() check object pool poolReturn() return . receive warning objects returned pool closed. Note validation performed object checked , generally want keep checked around little time possible.","code":""},{"path":"http://rstudio.github.io/pool/reference/poolCheckout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check out and return object from the pool — poolCheckout","text":"","code":"poolCheckout(pool)  # S4 method for Pool poolCheckout(pool)  poolReturn(object)  # S4 method for ANY poolReturn(object)"},{"path":"http://rstudio.github.io/pool/reference/poolCheckout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check out and return object from the pool — poolCheckout","text":"pool pool get object . object Object return","code":""},{"path":"http://rstudio.github.io/pool/reference/poolCheckout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check out and return object from the pool — poolCheckout","text":"","code":"pool <- dbPool(RSQLite::SQLite()) con <- poolCheckout(pool) con #> <SQLiteConnection> #>   Path:  #>   Extensions: TRUE poolReturn(con) poolClose(pool)"},{"path":"http://rstudio.github.io/pool/reference/poolWithTransaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Self-contained database transactions using pool — poolWithTransaction","title":"Self-contained database transactions using pool — poolWithTransaction","text":"function allows use pool object directly execute transaction database connection, without ever actually check connection pool return . Using function instead direct transaction methods guarantee leak connections forget commit/rollback transaction.","code":""},{"path":"http://rstudio.github.io/pool/reference/poolWithTransaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Self-contained database transactions using pool — poolWithTransaction","text":"","code":"poolWithTransaction(pool, func)  dbBreak()"},{"path":"http://rstudio.github.io/pool/reference/poolWithTransaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Self-contained database transactions using pool — poolWithTransaction","text":"pool pool object fetch connection . func function one argument, conn (database connection checked pool).","code":""},{"path":"http://rstudio.github.io/pool/reference/poolWithTransaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Self-contained database transactions using pool — poolWithTransaction","text":"func's return value.","code":""},{"path":"http://rstudio.github.io/pool/reference/poolWithTransaction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Self-contained database transactions using pool — poolWithTransaction","text":"function similar DBI::dbWithTransaction(), arguments work little differently. First, takes pool object, instead connection. Second, instead taking arbitrary chunk code execute transaction (.e. either run commands successfully run ), takes function. function (func argument) gives argument use body, database connection. , can use connection methods without ever check connection. can also use arbitrary R code inside func's body. function called fetch connection pool. function returns, release connection back pool. Like DBI sister DBI::dbWithTransaction(), function calls dbBegin() executing code, dbCommit() successful completion, dbRollback() case error. means calling poolWithTransaction always side effects, namely commit roll back code executed func called. addition, modify local R environment within func (e.g. setting global variables, writing disk), changes persist function returned. Also, like DBI::dbWithTransaction(), also special function called dbBreak() allows early, silent exit rollback. can called inside poolWithTransaction.","code":""},{"path":"http://rstudio.github.io/pool/reference/poolWithTransaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Self-contained database transactions using pool — poolWithTransaction","text":"","code":"if (requireNamespace(\"RSQLite\", quietly = TRUE)) {   pool <- dbPool(RSQLite::SQLite(), dbname = \":memory:\")    dbWriteTable(pool, \"cars\", head(cars, 3))   dbReadTable(pool, \"cars\")   # there are 3 rows    ## successful transaction   poolWithTransaction(pool, function(conn) {     dbExecute(conn, \"INSERT INTO cars (speed, dist) VALUES (1, 1);\")     dbExecute(conn, \"INSERT INTO cars (speed, dist) VALUES (2, 2);\")     dbExecute(conn, \"INSERT INTO cars (speed, dist) VALUES (3, 3);\")   })   dbReadTable(pool, \"cars\")   # there are now 6 rows    ## failed transaction -- note the missing comma   tryCatch(     poolWithTransaction(pool, function(conn) {       dbExecute(conn, \"INSERT INTO cars (speed, dist) VALUES (1, 1);\")       dbExecute(conn, \"INSERT INTO cars (speed dist) VALUES (2, 2);\")       dbExecute(conn, \"INSERT INTO cars (speed, dist) VALUES (3, 3);\")     }),     error = identity   )   dbReadTable(pool, \"cars\")   # still 6 rows    ## early exit, silently   poolWithTransaction(pool, function(conn) {     dbExecute(conn, \"INSERT INTO cars (speed, dist) VALUES (1, 1);\")     dbExecute(conn, \"INSERT INTO cars (speed, dist) VALUES (2, 2);\")     if (nrow(dbReadTable(conn, \"cars\")) > 7) dbBreak()     dbExecute(conn, \"INSERT INTO cars (speed, dist) VALUES (3, 3);\")   })   dbReadTable(pool, \"cars\")   # still 6 rows    poolClose(pool)  } else {   message(\"Please install the 'RSQLite' package to run this example\") }"},{"path":"http://rstudio.github.io/pool/reference/show-Pool-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show method — show,Pool-method","title":"Show method — show,Pool-method","text":"Show method","code":""},{"path":"http://rstudio.github.io/pool/reference/show-Pool-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show method — show,Pool-method","text":"","code":"# S4 method for Pool show(object)"},{"path":"http://rstudio.github.io/pool/reference/show-Pool-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show method — show,Pool-method","text":"object Pool object.","code":""},{"path":[]},{"path":"http://rstudio.github.io/pool/news/index.html","id":"pool-016","dir":"Changelog","previous_headings":"","what":"pool 0.1.6","title":"pool 0.1.6","text":"CRAN release: 2021-01-14 left_join() friends work pool objects (#111). dbPool() objects previously leak memory. (#115)","code":""},{"path":"http://rstudio.github.io/pool/news/index.html","id":"pool-015","dir":"Changelog","previous_headings":"","what":"pool 0.1.5","title":"pool 0.1.5","text":"CRAN release: 2020-11-03 dplyr dbplyr now Suggests instead Imports. Thanks, @AkhilGNair! (#106) used dbplyr, tbls now store copy pool, checked connection. (#107) dbListObjects(), dbCreateTable(), dbAppendTable(), dbIsReadOnly(), dbQuoteLiteral(), dbUnquoteIdentifier() methods now implemented pool objects. (#100, #109)","code":""},{"path":"http://rstudio.github.io/pool/news/index.html","id":"pool-0143","dir":"Changelog","previous_headings":"","what":"pool 0.1.4.3","title":"pool 0.1.4.3","text":"CRAN release: 2019-10-03 Previously, pool always set options(warn=1) running tasks. now ensures value warn can 1 greater. can useful debugging, options(warn=2) can used. (#90)","code":""},{"path":"http://rstudio.github.io/pool/news/index.html","id":"pool-0142","dir":"Changelog","previous_headings":"","what":"pool 0.1.4.2","title":"pool 0.1.4.2","text":"CRAN release: 2019-01-07 Update unit test compatibility future dbplyr. (#82)","code":""},{"path":"http://rstudio.github.io/pool/news/index.html","id":"pool-0141","dir":"Changelog","previous_headings":"","what":"pool 0.1.4.1","title":"pool 0.1.4.1","text":"CRAN release: 2018-06-29 Change package maintainer","code":""},{"path":"http://rstudio.github.io/pool/news/index.html","id":"pool-014","dir":"Changelog","previous_headings":"","what":"pool 0.1.4","title":"pool 0.1.4","text":"CRAN release: 2018-03-10 Changed methods dbExistsTable(), dbRemoveTable(), dbWriteTable(), dbGetQuery(), dbExecute(), dbListFields() dbReadTable() dispatch first two arguments, per default definition DBI. (#57)","code":""},{"path":"http://rstudio.github.io/pool/news/index.html","id":"pool-013","dir":"Changelog","previous_headings":"","what":"pool 0.1.3","title":"pool 0.1.3","text":"CRAN release: 2017-11-03 Use requireNamespace(\"pkg\", quietly = TRUE) RMySQL RSQLite examples tests since “Suggests” packages (.e. “Depends”). (commit 4205feb)","code":""},{"path":"http://rstudio.github.io/pool/news/index.html","id":"pool-012","dir":"Changelog","previous_headings":"","what":"pool 0.1.2","title":"pool 0.1.2","text":"CRAN release: 2017-11-03","code":""},{"path":"http://rstudio.github.io/pool/news/index.html","id":"minor-new-features-and-improvements-0-1-2","dir":"Changelog","previous_headings":"","what":"Minor new features and improvements","title":"pool 0.1.2","text":"Included examples documentation. (#50) Fixed “test-create-destroy.R” test. Previously, test run manually uses later async nature captured testthat. However, using later::run_now() immediately relevant code snippet (.e. still inside first argument expect_*) solves issue. (#50) Use difftime(t1, t0, units = \"secs\") calculating time interval. Unlike simpler t1 - t0 method, guarantees result always consistently number seconds. However, ’s change calculating new time (time interval) using t2 <- t1 - interval, since want t2 time, rather time interval (always returned difftime). (#50 #48, thank @caewok!)","code":""},{"path":"http://rstudio.github.io/pool/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"pool 0.1.2","text":"Fix dbplyr wrapper functions weren’t passing additional arguments call original dbplyr function included ... = ... instead .... Also, pass temporary = temporary copy_to.Pool, don’t defeat whole purpose wrapper. (#50) Change place check maximum number objects made. Previously, chunk code misplaced result buggy behavior: namely, maximum number objects reached, objects checked (even returned /objects back pool). reason wasn’t spotted earlier default maxSize Inf (’s usually good reason change ). (#50)","code":""},{"path":"http://rstudio.github.io/pool/news/index.html","id":"pool-011","dir":"Changelog","previous_headings":"","what":"pool 0.1.1","title":"pool 0.1.1","text":"CRAN release: 2017-09-23","code":""},{"path":"http://rstudio.github.io/pool/news/index.html","id":"breaking-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"pool 0.1.1","text":"Fix #39: Moved dplyr support pool dplyr 0.5.0 dplyr 0.7.0, includes lot breaking changes including addition brand new package called dbplyr. (#42) pool users, main change src_* functions now gone (dplyr pool). Therefore, something like: can just change simpler: ’re still old version dplyr want use pool well, please install package using tag created purpose: Changed time arguments accept number seconds, instead milliseconds. later package uses reason pool different, except backward compatibility. Since time arguments dbPool (idleTimeout validationInterval) default values, ’re hoping change won’t even noticed users. setting either directly, however, need update app update pool package. (#44) Dropped Pool methods around dbConnect dbDisconnect, made easier lose track whether ’re operating Pool object database connection directly. now , allow get connection pool return back, respectively: (#44)","code":"data <- src_pool(pool) %>% tbl(\"test\") data <- pool %>% tbl(\"test\") devtools::install_github(\"rstudio/pool@dplyr-pre-0.7.0-compat\") con <- poolCheckout(pool) poolReturn(con)"},{"path":"http://rstudio.github.io/pool/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"pool 0.1.1","text":"Use later package scheduling tasks (#44). also side effect fixing #40 #43 since later allows us get rid naiveScheduler completely.","code":""},{"path":"http://rstudio.github.io/pool/news/index.html","id":"library-updates-0-1-1","dir":"Changelog","previous_headings":"","what":"Library updates","title":"pool 0.1.1","text":"Roxygen 5.0.1 6.0.1. (commit #9952000)","code":""},{"path":"http://rstudio.github.io/pool/news/index.html","id":"pool-010","dir":"Changelog","previous_headings":"","what":"pool 0.1.0","title":"pool 0.1.0","text":"Initial release!","code":""}]
